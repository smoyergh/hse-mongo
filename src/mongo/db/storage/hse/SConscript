# -*- mode: python; -*-
#
#    SPDX-License-Identifier: AGPL-3.0-only
#
#    Copyright (C) 2017-2020 Micron Technology, Inc.
#
#    This code is derived from and modifies the mongo-rocks project.
#
#    Copyright (C) 2014 MongoDB Inc.
#
#    This program is free software: you can redistribute it and/or  modify
#    it under the terms of the GNU Affero General Public License, version 3,
#    as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    As a special exception, the copyright holders give permission to link the
#    code of portions of this program with the OpenSSL library under certain
#    conditions as described in each individual source file and distribute
#    linked combinations including the program with the OpenSSL library. You
#    must comply with the GNU Affero General Public License in all respects for
#    all of the code used other than as permitted herein. If you modify file(s)
#    with this exception, you may extend this exception to your version of the
#    file(s), but you are not obligated to do so. If you do not wish to do so,
#    delete this exception statement from your version. If you delete this
#    exception statement from all source files in the program, then also delete
#    it in the license file.
#
Import("env")

import os
import subprocess

K_CON_SRC = Dir('.').srcnode().abspath
K_CON_VERSION_FILE = os.path.join(K_CON_SRC, 'VERSION')
K_GEN_FILE_NAME = os.path.join(K_CON_SRC, 'src', 'hse_versions.h')

def getHseConnectorGitSha(conf, env):
    s_pwd = os.getcwd()
    print s_pwd
    os.chdir(K_CON_SRC)
    try:
        sha=subprocess.check_output(['git', 'rev-parse', 'HEAD'])
    except:
        sha="nogit"
    os.chdir(s_pwd)
    return sha.strip().decode('utf-8')

def getHseVersion(conf, env):
    hse_ver = 'NA'
    # need to enhance this when we have a version api.
    return hse_ver

def getHseConnectorVersion(conf, env):
    line = 'UNKNOWN'
    with open(K_CON_VERSION_FILE, 'r') as f:
        line = f.readline()
    return line.strip()

def gensrc(conf, env):
    with open(K_GEN_FILE_NAME, 'w') as f:
        contents = \
'''/**
 *    SPDX-License-Identifier: AGPL-3.0-only
 *
 *    Copyright (C) 2017-2020 Micron Technology, Inc.
 *
 *    This code is derived from and modifies the mongo-rocks project.
 *
 *    Copyright (C) 2014 MongoDB Inc.
 *
 *    This program is free software: you can redistribute it and/or  modify
 *    it under the terms of the GNU Affero General Public License, version 3,
 *    as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the GNU Affero General Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 *
 * This is a generated file.
*/
#pragma once

namespace hse {{
static const char* K_HSE_VERSION="{hse_version}";
static const char* K_HSE_CONNECTOR_VERSION="{connector_version}";
static const char* K_HSE_CONNECTOR_GIT_SHA="{hse_connector_git_sha}";
}}'''.format(
            hse_version=getHseVersion(conf, env),
            connector_version=getHseConnectorVersion(conf, env),
            hse_connector_git_sha=getHseConnectorGitSha(conf, env)
        );
        f.write(contents)

def configure(conf, env):
    print("Configuring Heterogeneous-memory Storage Engine")
    gensrc(conf, env)

configure(None, env)

HSE_LIBARRAY = [
    'hse-3',
]


HSE_THIRD_PARTY_LIBDEPS = [
    'pthread',
    'lz4',
]

env.Library(
    target='storage_hse_base',
    source=[
        'src/hse_impl.cpp',
        'src/hse_clienttxn.cpp',
        'src/hse_kvscursor.cpp',
        'src/hse_global_options.cpp',
        'src/hse_engine.cpp',
        'src/hse_oplog_block.cpp',
        'src/hse_record_store.cpp',
        'src/hse_index.cpp',
        'src/hse_recovery_unit.cpp',
        'src/hse_counter_manager.cpp',
        'src/hse_durability_manager.cpp',
        'src/hse_stats.cpp',
        'src/hse_util.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/namespace_string',
        '$BUILD_DIR/mongo/db/catalog/collection_options',
        '$BUILD_DIR/mongo/db/concurrency/write_conflict_exception',
        '$BUILD_DIR/mongo/db/index/index_descriptor',
        '$BUILD_DIR/mongo/db/storage/bson_collection_catalog_entry',
        '$BUILD_DIR/mongo/db/storage/index_entry_comparison',
        '$BUILD_DIR/mongo/db/storage/journal_listener',
        '$BUILD_DIR/mongo/db/storage/key_string',
        '$BUILD_DIR/mongo/db/storage/oplog_hack',
        '$BUILD_DIR/mongo/util/background_job',
        '$BUILD_DIR/mongo/util/processinfo',
    ],
    SYSLIBDEPS=HSE_LIBARRAY+HSE_THIRD_PARTY_LIBDEPS
)

env.Library(
    target='storage_hse',
    source=[
        'src/hse_init.cpp',
        'src/hse_options_init.cpp',
        'src/hse_record_store_mongod.cpp',
        'src/hse_server_status.cpp'
    ],
    LIBDEPS=[
        'storage_hse_base',
        '$BUILD_DIR/mongo/db/storage/kv/kv_engine'
    ],
    SYSLIBDEPS=HSE_LIBARRAY+HSE_THIRD_PARTY_LIBDEPS,
    LIBDEPS_DEPENDENTS=['$BUILD_DIR/mongo/db/serveronly']
)

env.Library(
    target='storage_hse_mock',
    source=[
        'src/hse_record_store_mock.cpp',
    ],
    LIBDEPS=[
        'storage_hse_base',
        #
        # Temporary crutch since the ssl cleanup is hard coded in
        # background.cpp
        #
        '$BUILD_DIR/mongo/util/net/network',
    ],
    SYSLIBDEPS=HSE_LIBARRAY+HSE_THIRD_PARTY_LIBDEPS
)

common = env.Object('src/hse_ut_common.cpp')

env.CppUnitTest(
    target='storage_hse_test',
    source=['src/hse_test.cpp'] + common,
    LIBDEPS=[
        'storage_hse_base',
        'storage_hse_mock',
        '$BUILD_DIR/mongo/db/storage/storage_options'
    ]
)

env.CppUnitTest(
    target='storage_hse_engine_test',
    source=['src/hse_engine_test.cpp'] + common,
    LIBDEPS=[
        'storage_hse_base',
        'storage_hse_mock',
        '$BUILD_DIR/mongo/db/storage/kv/kv_engine_test_harness',
        '$BUILD_DIR/mongo/db/storage/storage_options'
    ]
)

env.CppUnitTest(
    target='storage_hse_index_test',
    source=['src/hse_index_test.cpp'] + common,
    LIBDEPS=[
        'storage_hse_base',
        'storage_hse_mock',
        '$BUILD_DIR/mongo/db/storage/sorted_data_interface_test_harness'
    ]
)

env.CppUnitTest(
    target='storage_hse_record_store_test',
    source=['src/hse_record_store_test.cpp'] + common,
    LIBDEPS=[
        'storage_hse_mock',
        '$BUILD_DIR/mongo/db/storage/record_store_test_harness'
    ]
)

env.Command(
    'hse_test_harness.py',
    'src/hse_test_harness.py',
    "cp $SOURCES $TARGET"
)

#
# Provides shorthand target for the command line to build the HSE unit tests.
#
env.Alias(
    'hse_unit_tests',
    [
        'storage_hse_test',
        'storage_hse_engine_test',
        'storage_hse_index_test',
        'storage_hse_record_store_test',
        'hse_test_harness.py'
    ]
)
